name: Build Test Package Release on Merge

on:
  pull_request:
    types: [closed]  # Trigger when a pull request is closed
    branches:
      - main  # Specify the target branch where the PR is merged

jobs:
  build:
    if: github.event.pull_request.merged == true  # Only run if the pull request was merged
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Build
        run: |
          go build wgm.go
          mkdir dist
          mv wgm dist/
          echo ${{ github.ref_name }}

      - name: Increment Version and Create Tag
        id: increment_version
        run: |
          # Get the latest tag using git describe
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null)

          # Check if the command returned a tag
          if [ -z "$latest_tag" ]; then
              echo "Error: No tags found in the repository."
              exit 1
          fi

          echo "Latest tag: $latest_tag"

          # Extract the major, minor, and patch numbers using regex
          if [[ $latest_tag =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"

              # Increment the patch number
              new_patch=$((patch + 1))

              # Create the new version string
              new_version="$major.$minor.$new_patch"
              echo "New version: $new_version"

              # Create a new tag for the incremented version
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              git tag -a "v$new_version" -m "Increment version to $new_version"
              git push origin "v$new_version"

              # Set output for use in the next step
              echo "new_version=v$new_version" >> $GITHUB_ENV

          else
              echo "Error: Latest tag '$latest_tag' is not in SemVer format (e.g., 1.0.0)."
              exit 1
          fi

      - name: Create a new GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: $new_version  # Use the newly incremented version tag
          files: dist/wgm  # Replace with the correct file paths
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
